<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0"
           xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

    <!-- Allow the use of system properties -->
    <ext:property-placeholder placeholder-prefix="$[" placeholder-suffix="]" />
    <bean id="amqpConnectionDetails" class="org.apache.camel.component.amqp.AMQPConnectionDetails">
        <argument value="amqp://$[amqp.host]:$[amqp.port]"/>
        <argument value="$[amqp.username]"/>
        <argument value="$[amqp.password]"/>
    </bean>


    <camelContext id="camelContext" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="amqpRoute">
            <from uri="direct:camel-amqp-test"/>
            <setHeader name="theHeader">
                <constant>This is header</constant>
            </setHeader>
            <setBody>
                <constant>Hello Camel</constant>
            </setBody>
            <to uri="amqp:amqpQueueName"/>
            <log message="Message sent to AMQP: ${body} headers ${header.theHeader}"/>
        </route>

        <route id="amqpRoute2">
            <from uri="amqp:amqpQueueName"/>
            <log message="Message received from AMQP: ${body} headers ${header.theHeader}"/>
            <choice>
                <when>
                    <simple>${header.theHeader} != "This is header"</simple>
                    <log message="KO - not expected ${header.theHeader}"/>
                    <throwException exceptionType="java.lang.Exception" message="An unexpected header returned"/>
                </when>
                <otherwise>
                    <log message="OK - expected ${header.theHeader}"/>
                </otherwise>
            </choice>
            <choice>
                <when>
                    <simple>${body} != "Hello Camel"</simple>
                    <log message="KO - not expected ${body}"/>
                    <throwException exceptionType="java.lang.Exception" message="An unexpected body returned"/>
                </when>
                <otherwise>
                    <log message="OK - expected ${body}"/>
                </otherwise>
            </choice>
            <setBody>
                <constant>OK</constant>
            </setBody>
            <to uri="mock:camel-amqp-test"/>
        </route>
    </camelContext>
</blueprint>